// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.12.4
// source: assessment.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "assessment";

/** GetAssessmentByInsuranceNumberのリクエストメッセージ */
export interface GetAssessmentByInsuranceNumberRequest {
  /** 被保険者番号 */
  insuranceNumber: string;
}

/** GetAssessmentByInsuranceNumberのレスポンスメッセージ */
export interface GetAssessmentByInsuranceNumberResponse {
  insuredPerson: InsuredPerson | undefined;
  emergencyContact: EmergencyContact | undefined;
  contact: Contact | undefined;
  familyStructure: FamilyStructure | undefined;
  residenceInfo: ResidenceInfo | undefined;
  toiletInfo: ToiletInfo | undefined;
  bathroomInfo: BathroomInfo | undefined;
  mobilityInfo: MobilityInfo | undefined;
}

/** CreateAssessmentのリクエストメッセージ */
export interface CreateAssessmentRequest {
  insuredPerson: InsuredPerson | undefined;
  emergencyContact: EmergencyContact | undefined;
  contact: Contact | undefined;
  familyStructure: FamilyStructure | undefined;
  residenceInfo: ResidenceInfo | undefined;
  toiletInfo: ToiletInfo | undefined;
  bathroomInfo: BathroomInfo | undefined;
  mobilityInfo: MobilityInfo | undefined;
}

/** CreateAssessmentのレスポンスメッセージ */
export interface CreateAssessmentResponse {
  success: boolean;
}

/** 被保険者情報 */
export interface InsuredPerson {
  /** 被保険者番号 (PK) */
  insuranceNumber: string;
  /** 本人氏名 */
  fullName: string;
  /** 年齢 */
  age: number;
  /** 性別 */
  gender: string;
  /** 依頼終了日 */
  dependencyEndDate: string;
  /** 緊急連絡先者ID */
  emergencyContactId: string;
  /** 相談者連絡先者ID */
  contactId: string;
  /** 家族構成 (FK) */
  familyId: string;
}

/** 緊急連絡先者情報 */
export interface EmergencyContact {
  /** 緊急連絡先者ID (PK) */
  emergencyContactId: string;
  /** 緊急連絡先者氏名 */
  fullName: string;
  /** 緊急連絡先者と被保険者の関係 */
  relationToInsured: string;
  /** 緊急連絡先者性別 */
  gender: string;
  /** 緊急連絡先者住所 */
  address: string;
  /** 緊急連絡先電話番号 */
  phone: string;
  /** 本人との関係 */
  relationToSelf: string;
}

/** 相談者情報 */
export interface Contact {
  /** 相談者連絡先者ID (PK) */
  contactId: string;
  /** 相談者氏名 */
  fullName: string;
  /** 相談者と被保険者の関係 */
  relationToInsured: string;
  /** 相談者性別 */
  gender: string;
  /** 相談者住所 */
  address: string;
  /** 相談者電話番号 */
  phone: string;
  /** 本人との関係 */
  relationToSelf: string;
}

/** 家族構成情報 */
export interface FamilyStructure {
  /** 被保険者番号 (FK) */
  insuranceNumber: string;
  /** 家族ID (PK) */
  familyId: string;
  /** 氏名 (主たる介護者) */
  fullName: string;
  /** 性別 */
  gender: string;
  /** 状況 */
  status: string;
  /** 家族関係 */
  familyRelationship: string;
  /** 特定事項（自治会・ボランティア等） */
  activityStatus: string;
}

/** 住宅情報 */
export interface ResidenceInfo {
  /** 被保険者番号 (FK) */
  insuranceNumber: string;
  /** 住宅情報ID (PK) */
  residenceId: string;
  /** 戸籍上の住宅状況 */
  householdStatus: string;
  /** 住宅の状況 */
  situation: string;
  /** トイレの有無 */
  hasToilet: boolean;
  /** 浴室の有無 */
  hasBath: boolean;
  /** 談話室の有無 */
  hasLivingRoom: boolean;
  /** 家政婦 */
  caretakerId: string;
  /** 配食サービス */
  deliveryService: string;
  /** 移動手段 */
  mobilityStatus: string;
}

/** トイレ情報 */
export interface ToiletInfo {
  /** 被保険者番号 (FK) */
  insuranceNumber: string;
  /** 和式or洋式orその他 */
  toiletType: string;
  /** 手すりの有無 */
  hasHandrail: boolean;
  /** トイレまでの段差の有無 */
  hasStepsToToilet: boolean;
}

/** 浴室情報 */
export interface BathroomInfo {
  /** 被保険者番号 (FK) */
  insuranceNumber: string;
  /** 浴室の有無 */
  hasBathroom: boolean;
  /** 手すりの有無 */
  hasHandrail: boolean;
  /** 浴室までの段差の有無 */
  hasStepsToBathroom: boolean;
}

/** 移動手段情報 */
export interface MobilityInfo {
  /** 被保険者番号 (FK) */
  insuranceNumber: string;
  /** 福祉機器の使用有無 */
  usesWelfareEquipment: boolean;
  /** 車いすの有無 */
  usesWheelchair: boolean;
  /** 電動車いすの有無 */
  usesElectricWheelchair: boolean;
  /** 杖の有無 */
  usesCane: boolean;
  /** 歩行器の有無 */
  canWalk: boolean;
  /** その他の移動手段 */
  otherMobilityAid: string;
  /** 室内のみか室外も含むか */
  usesIndoorOrOutdoor: boolean;
}

export const ASSESSMENT_PACKAGE_NAME = "assessment";

export interface AssessmentServiceClient {
  getAssessmentByInsuranceNumber(
    request: GetAssessmentByInsuranceNumberRequest,
  ): Observable<GetAssessmentByInsuranceNumberResponse>;

  createAssessment(request: CreateAssessmentRequest): Observable<CreateAssessmentResponse>;
}

export interface AssessmentServiceController {
  getAssessmentByInsuranceNumber(
    request: GetAssessmentByInsuranceNumberRequest,
  ):
    | Promise<GetAssessmentByInsuranceNumberResponse>
    | Observable<GetAssessmentByInsuranceNumberResponse>
    | GetAssessmentByInsuranceNumberResponse;

  createAssessment(
    request: CreateAssessmentRequest,
  ): Promise<CreateAssessmentResponse> | Observable<CreateAssessmentResponse> | CreateAssessmentResponse;
}

export function AssessmentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAssessmentByInsuranceNumber", "createAssessment"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AssessmentService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AssessmentService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ASSESSMENT_SERVICE_NAME = "AssessmentService";
