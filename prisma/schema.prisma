generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Demo {
  id    Int    @id @default(autoincrement())
  name  String
  age   Int
  email String
}

model User {
  id               Int               @id @default(autoincrement())
  insuredId        Int               @unique
  name             String
  telephoneNumber  String
  mobileNumber     String
  age              Int
  sex              Boolean
  address          String
  requestedDate    DateTime
  emergencyId      Int?
  consulterId      Int?
  bathroom         Bathroom?
  equipment        Equipment?
  family           Family?
  home             Home?
  movement         Movement?
  room             Room?
  toilet           Toilet?
  consulter        Consulter?        @relation(fields: [consulterId], references: [consulterId])
  emergencyContact EmergencyContact? @relation(fields: [emergencyId], references: [emergencyId])

  @@index([consulterId], map: "User_consulterId_fkey")
  @@index([emergencyId], map: "User_emergencyId_fkey")
}

model EmergencyContact {
  id              Int     @id @default(autoincrement())
  emergencyId     Int     @unique
  name            String
  age             Int
  sex             Boolean
  telephoneNumber String
  mobileNumber    String
  address         String
  relationship    String
  users           User[]
}

model Consulter {
  id              Int     @id @default(autoincrement())
  consulterId     Int     @unique
  name            String
  age             Int
  sex             Boolean
  telephoneNumber String
  mobileNumber    String
  address         String
  relationship    String
  users           User[]
}

model Family {
  id               Int    @id @default(autoincrement())
  userId           Int    @unique
  familyId         Int    @unique
  name             String
  relationship     String
  livingSeparately String
  employment       String
  condition        String
  memo             String
  user             User   @relation(fields: [userId], references: [insuredId])
}

model Home {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  style  String
  memo   String
  user   User   @relation(fields: [userId], references: [insuredId])
}

model Room {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  myRoom      Boolean
  floor       Int
  elevator    Boolean
  bed         String
  electricBed String
  sunshine    Boolean
  heater      Boolean
  cooler      Boolean
  user        User    @relation(fields: [userId], references: [insuredId])
}

model Movement {
  id                  Int     @id @default(autoincrement())
  userId              Int     @unique
  assistiveTechnology Boolean
  wheelchair          Boolean
  electricWheelchair  Boolean
  stick               Boolean
  walker              Boolean
  other               String?
  indoor              Boolean
  user                User    @relation(fields: [userId], references: [insuredId])
}

model Equipment {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique
  cooktop Boolean
  heater  String
  user    User    @relation(fields: [userId], references: [insuredId])
}

model Toilet {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  style    String
  handrail Boolean
  step     Boolean
  user     User    @relation(fields: [userId], references: [insuredId])
}

model Bathroom {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  existence Boolean
  handrail  Boolean
  step      Boolean
  user      User    @relation(fields: [userId], references: [insuredId])
}

model Service {
  id                                 Int                                 @id @default(autoincrement())
  insuredId                          Int                                 @unique
  name                               String
  date                               DateTime
  athome                             AtHome?
  dailylifeindependenceLevel         DailyLifeIndependenceLevel?
  disabilitynotebook                 DisabilityNotebook?
  eligibility                        Eligibility?
  independencesupportmedicalexpenses IndependenceSupportMedicalExpenses?
  mentaldisabilitycertificate        MentalDisabilityCertificate?
  specialeducationrecordbook         SpecialEducationRecordBook?
  using                              Using?
  wants                              Wants?
}

model Using {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  detail   String
  provider String
  memo     String
  user     Service @relation(fields: [userId], references: [insuredId])
}

model Wants {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  detail   String
  provider String
  memo     String
  user     Service @relation(fields: [userId], references: [insuredId])
}

model Eligibility {
  id        Int      @id @default(autoincrement())
  userId Int      @unique
  type      String
  done      Boolean
  level     Level?
  date      DateTime
  service   Service  @relation(fields: [userId], references: [insuredId])
}

model DisabilityNotebook {
  id      Int      @id @default(autoincrement())
  userId  Int      @unique
  possess Boolean
  grade   Int
  date    DateTime
  user    Service  @relation(fields: [userId], references: [insuredId])
}

model SpecialEducationRecordBook {
  id      Int      @id @default(autoincrement())
  userId  Int      @unique
  possess Boolean
  grade   Int
  date    DateTime
  user    Service  @relation(fields: [userId], references: [insuredId])
}

model MentalDisabilityCertificate {
  id      Int      @id @default(autoincrement())
  userId  Int      @unique
  possess Boolean
  grade   Int
  date    DateTime
  user    Service  @relation(fields: [userId], references: [insuredId])
}

model IndependenceSupportMedicalExpenses {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique
  possess Boolean
  grade   Int
  user    Service @relation(fields: [userId], references: [insuredId])
}

model DailyLifeIndependenceLevel {
  id              Int     @id @default(autoincrement())
  userId          Int     @unique
  disabledElderly String
  dementia        String
  user            Service @relation(fields: [userId], references: [insuredId])
}

model AtHome {
  id     Int      @id @default(autoincrement())
  userId Int      @unique
  menu   String
  date   DateTime
  user   Service  @relation(fields: [userId], references: [insuredId])
}

model Medical {
  id     Int    @id @default(autoincrement())
  height Int
  weight Int
  tooth  Tooth
  memo   String
}

model Disease {
  id                  Int    @id @default(autoincrement())
  name                String
  outbreak            String
  frequency           String
  hospitalName        String
  hospitalPhoneNumber String
  department          String
  pcp                 String
  note                String
}

enum Level {
  VALUE1
  VALUE2
  VALUE3
  VALUE4
  VALUE5
}

enum Tooth {
  HAS
  NO
  FULL_DENTURES
  PARTIAL_DENTURES
}
